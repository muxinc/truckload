import { useState } from 'react';

import useMigrationStore from '@/utils/store';
import type { PlatformConfig } from '@/utils/store';

import Heading from '../heading';

interface MuxPlatformConfig {
  videoQuality: 'basic' | 'plus' | 'premium';
  maxResolutionTier?: '1080p' | '1440p' | '2160p'; // Conditionally available based on videoQuality
  autoGenerateCaptions?: boolean;
  playbackPolicy?: ('public' | 'signed')[]; // Optional array for multi-checkboxes
}

interface Field {
  label: string;
  description: string;
  docsUrl: string;
  name: string;
  type: 'select' | 'checkbox' | 'multi-checkbox' | 'text';
  values?: string[] | ((config: any) => string[]);
  visible?: (config: PlatformConfig) => boolean;
}

const PLATFORM_METADATA_FIELDS: { id: string; fields: Field[] }[] = [
  {
    id: 'mux',
    fields: [
      {
        label: 'Video quality',
        description:
          'The video quality level informs the cost, quality, and available platform features for the asset.',
        docsUrl: 'https://www.mux.com/docs/guides/use-video-quality-levels',
        name: 'videoQuality',
        type: 'select',
        values: ['basic', 'plus', 'premium'],
      },
      {
        label: 'Max resolution tier',
        description:
          'This field controls the maximum resolution that Mux will encode, store, and deliver your media in. Mux does not to automatically ingest content at 4K so that you can avoid unexpectedly high ingest bills',
        docsUrl: 'https://docs.mux.com/guides/stream-videos-in-4k',
        name: 'maxResolutionTier',
        type: 'select',
        values: (config) => (config.videoQuality === 'basic' ? ['1080p'] : ['1080p', '1440p', '2160p']),
      },
      {
        label: 'Auto-generate captions',
        description: 'Automatically generate captions for your videos',
        docsUrl: 'https://docs.mux.com/guides/add-autogenerated-captions-and-use-transcripts',
        name: 'autoGenerateCaptions',
        type: 'checkbox',
      },
      {
        label: 'Test mode',
        description: 'For testing only. Limits asset duration to 10 seconds and adds a watermark to the video',
        docsUrl: 'https://www.mux.com/blog/new-test-mux-video-features-for-free',
        name: 'testMode',
        type: 'checkbox',
      },
      {
        label: 'Playback policy',
        description:
          'Playback policies allow you to control the different ways users can view and interact with your content.',
        docsUrl: 'https://docs.mux.com/guides/secure-video-playback',
        name: 'playbackPolicy',
        type: 'multi-checkbox',
        values: ['public', 'signed'],
      },
    ],
  },
];

export default function DestinationMetadata() {
  const destinationPlatform = useMigrationStore((state) => state.destinationPlatform);
  const setPlatform = useMigrationStore((state) => state.setPlatform);
  const setCurrentStep = useMigrationStore((state) => state.setCurrentStep);
  const platform = useMigrationStore((state) =>
    state.currentStep === 'set-import-settings' ? state.destinationPlatform : state.sourcePlatform
  );
  const [config, setConfig] = useState<PlatformConfig>({ videoQuality: 'basic' });

  if (!platform) {
    return null;
  }

  const platformFields = PLATFORM_METADATA_FIELDS.find((field) => field.id === destinationPlatform?.id);

  const handleFieldChange = (field: Field, value: any) => {
    if (field.type === 'checkbox') {
      // Handle single checkbox
      console.log(field);
      console.log(value);
      const updatedConfig = value ? { ...config, [field.name]: '1' } : { ...config };
      if (!value) {
        delete updatedConfig[field.name];
      }
      setConfig(updatedConfig);
    } else if (field.type === 'multi-checkbox') {
      // Handle multi-checkbox
      let newArray = (config[field.name] as string[]) || [];
      if (value.checked) {
        // Add value if checked
        newArray = [...newArray, value.optionValue];
      } else {
        // Remove value if unchecked
        newArray = newArray.filter((item) => item !== value.optionValue);
      }
      // Update or delete key based on array contents
      const updatedConfig = newArray.length > 0 ? { ...config, [field.name]: newArray } : { ...config };
      if (newArray.length === 0) {
        delete updatedConfig[field.name];
      }
      setConfig(updatedConfig);
    } else {
      // Handle select and text inputs
      setConfig({ ...config, [field.name]: value });
    }
  };

  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setPlatform(platform.type, { ...platform, config });
    setCurrentStep('review');
  };

  return (
    <form onSubmit={onSubmit}>
      <Heading>Choose your import settings</Heading>

      <div className="flex flex-col gap-4 mb-10">
        {platformFields?.fields.map((field) => {
          if (field.visible && !field.visible(config)) {
            return null;
          }

          const fieldId = `field-${field.name}`;
          return (
            <div key={field.name}>
              {field.type === 'select' && (
                <div className="sm:col-span-3">
                  <label htmlFor={fieldId} className="block text-sm font-medium leading-6 text-gray-900">
                    {field.label}
                  </label>
                  <select
                    id={fieldId}
                    name={field.name}
                    value={config[field.name] || ''}
                    onChange={(e) => handleFieldChange(field, e.target.value)}
                    className="block w-full rounded-md border-0 py-1.5 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6"
                  >
                    {field.values &&
                      (typeof field.values === 'function' ? field.values(config) : field.values).map((value) => (
                        <option key={value} value={value}>
                          {value}
                        </option>
                      ))}
                  </select>
                  {(field.description || field.docsUrl) && (
                    <p className="text-gray-500 text-xs mt-2 max-w-80">
                      {field.description}
                      {field.docsUrl && (
                        <>
                          {' '}
                          <a
                            href={field.docsUrl}
                            target="_blank"
                            className="underline hover:no-underline focus:no-underline"
                          >
                            Read more
                          </a>
                        </>
                      )}
                    </p>
                  )}
                </div>
              )}

              {field.type === 'checkbox' && (
                <div className="">
                  <div className="flex gap-x-3">
                    <div className="flex h-6 items-center">
                      <input
                        id={fieldId}
                        name={field.name}
                        type="checkbox"
                        checked={!!config[field.name]}
                        onChange={(e) => handleFieldChange(field, e.target.checked)}
                        className="h-4 w-4 rounded border border-gray-300 text-indigo-600 focus:ring-indigo-600"
                      />
                    </div>
                    <div className="text-sm leading-6">
                      <label htmlFor={fieldId} className="font-medium text-gray-900">
                        {field.label}
                      </label>
                    </div>
                  </div>
                  {(field.description || field.docsUrl) && (
                    <p className="text-gray-500 mt-1 text-xs max-w-80">
                      {field.description}
                      {field.docsUrl && (
                        <>
                          {' '}
                          <a
                            href={field.docsUrl}
                            target="_blank"
                            className="underline hover:no-underline focus:no-underline"
                          >
                            Read more
                          </a>
                        </>
                      )}
                    </p>
                  )}
                </div>
              )}

              {field.type === 'multi-checkbox' && (
                <div>
                  <fieldset className="text-sm">
                    <legend className="block text-sm font-medium leading-6 text-gray-900">{field.label}</legend>
                    <div className="mt-2 flex flex-col sm:flex-row gap-y-4 gap-x-3 [justify-content:start]">
                      {field.values &&
                        (typeof field.values === 'function' ? field.values(config) : field.values).map((value) => (
                          <div key={value} className="flex items-center">
                            <input
                              id={`${fieldId}-${value}`}
                              name={field.name}
                              value={value}
                              type="checkbox"
                              checked={config[field.name]?.includes(value)}
                              onChange={(e) =>
                                handleFieldChange(field, { optionValue: e.target.value, checked: e.target.checked })
                              }
                              className="h-4 w-4 rounded border border-gray-300 text-indigo-600 focus:ring-indigo-600"
                            />
                            <label htmlFor={value} className="ml-3 min-w-0">
                              {value}
                            </label>
                          </div>
                        ))}
                    </div>
                  </fieldset>
                  <p className="text-gray-500 text-xs mt-2 max-w-80">
                    {field.description}
                    {field.docsUrl && (
                      <>
                        {' '}
                        <a
                          href={field.docsUrl}
                          target="_blank"
                          className="underline hover:no-underline focus:no-underline"
                        >
                          Read more
                        </a>
                      </>
                    )}
                  </p>
                </div>
              )}

              {field.type === 'text' && (
                <div>
                  <label htmlFor={fieldId} className="block text-sm font-medium text-gray-900">
                    {field.label}
                  </label>
                  <input
                    type="text"
                    id={fieldId}
                    name={field.name}
                    value={config[field.name] || ''}
                    onChange={(e) => handleFieldChange(field, e.target.value)}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-500 focus:ring-opacity-50"
                  />
                  <p className="mt-2 text-sm text-gray-500">
                    {field.description}{' '}
                    <a href={field.docsUrl} target="_blank" rel="noopener noreferrer" className="underline">
                      Read more
                    </a>
                  </p>
                </div>
              )}
            </div>
          );
        })}
      </div>

      <button
        type="submit"
        className="inline-flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        Confirm and review
      </button>
    </form>
  );
}
